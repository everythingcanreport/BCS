<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'github' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!-- bootstrap -->
    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">      
    <link href="/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="/themes/css/bootstrappage.css" rel="stylesheet"/>
    <!-- global styles -->
    <link href="/themes/css/flexslider.css" rel="stylesheet"/>
    <link href="/themes/css/main.css" rel="stylesheet"/>
    <!-- scripts -->
    <script src="/themes/js/jquery-1.7.2.min.js"></script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>       
    <script src="/themes/js/superfish.js"></script>  
    <script src="/themes/js/jquery.scrolltotop.js"></script>
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <!--TOP HEADER-->
      <%if(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) {%>
        <%- partial('top_bar.ejs') %>
        <%}%>
    <!--END-->
    <div id="wrapper" class="container <%=(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) ? '' : 'login'%>">
      <!--MAIN MENU-->
      <%if(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) {%>
        <%- partial('main_menu.ejs') %>
        <%}%>
      <!--END-->

      <!--BANNER-->
      <%if(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) {%>
        <%- partial('banner.ejs') %>
        <%}%>
      <!--END-->

      <!--CONTENT-->
          <%- body %>
      <!--END-->

      <!--FOOTER-->
      <%if(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) {%>
        <%- partial('footer.ejs') %>
        <%}%>
      <!--END-->

      <!--COPYRIGHT-->
      <%if(locals &&
        locals.baseUrlServer &&
        locals.baseUrlServer.indexOf('/login')==-1) {%>
        <%- partial('copyright.ejs') %>
        <%}%>
      <!--END-->
    </div>
    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script src="/themes/js/common.js"></script>
    <script src="/themes/js/jquery.flexslider-min.js"></script>
    <script type="text/javascript">
      $(function() {
        $(document).ready(function() {
          $('.flexslider').flexslider({
            animation: "fade",
            slideshowSpeed: 4000,
            animationSpeed: 600,
            controlNav: false,
            directionNav: true,
            controlsContainer: ".flex-container" // the container that holds the flexslider
          });
        });
      });
    </script>
  </body>
</html>
